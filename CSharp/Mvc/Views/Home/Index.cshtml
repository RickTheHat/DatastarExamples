@{
    ViewData["Title"] = "ASP.NET Core Examples with Datastar";
}

<!-- Main -->
<main id="main-content">
    <section id="what-is-datastar">
        <h2>
            What is Datastar?
        </h2>
        <p>Datastar is a lightweight hypermedia framework that brings reactive functionality to server-rendered
            applications. It combines the best of both worlds:</p>
        <ul>
            <li>The simplicity and reliability of server-side rendering</li>
            <li>The dynamic, reactive user experience in the style of a Single Page Application (SPA) but with very
                little to no JavaScript
            </li>
        </ul>
    </section>
    <section id="project-status">
        <h2>
            Project Status
        </h2>
        <p>These ASP.NET Core Examples with Datastar are currently in development. The project is open source and
            contributions are welcome.</p>
        <ul>
            <li>
                <span style="color:green">working</span>&nbsp;<a
                    href="https://github.com/RickTheHat/DatastarExamples/tree/main/CSharp/Mvc" target="_blank">ASP.NET Core MVC</a>
            </li>
            <li>
                <span style="color:green">working</span>&nbsp;<a
                    href="https://github.com/RickTheHat/DatastarExamples/tree/main/CSharp/RazorPages"
                    target="_blank">ASP.NET Core Razor Pages</a>
            </li>
            <li>
                <span style="color:green">working</span>&nbsp;<a
                    href="https://github.com/RickTheHat/DatastarExamples/tree/main/CSharp/MinimalApi"
                    target="_blank">ASP.NET Core Minimal APIs</a>
            </li>
        </ul>
    </section>
    <section id="benefits">
        <h2>Datastar Benefits</h2>
        <h3>Say Goodbye to Full Page Refreshes</h3>
        <p>The dreaded full page refresh is a thing of the past with Datastar - enjoy smooth, partial updates that keep
            your users in flow</p>

        <h3>Build Like a Pro, Code Like a Beginner</h3>
        <p>Create sophisticated, reactive web applications without wrestling with complex state management of some
            JavaScript
            frameworks</p>

        <h3>Your Server, Your Rules</h3>
        <p>Keep all your business logic where it belongs - on the server. No more duplicating validation rules or
            business logic in JavaScript</p>

        <h3>Instant Feedback</h3>
        <p>Create responsive interfaces that feel like native apps - type in a search box and watch results filter
            instantly, all without complex client-side code</p>

        <h3>Learn Once, Build Anything</h3>
        <p>If you can build a traditional web page, you can build reactive applications. No need to learn Redux, React,
            or complex state management patterns</p>

        <h3>Focus on Features, Not Plumbing • Spend your time building features</h3>
        <p>Spend your time building features users love instead of managing state, writing JavaScript, or debugging
            client-server communication</p>

        <h3>Real-Time Magic</h3>
        <p>Update multiple parts of your page instantly - imagine a chat application where messages, user lists, and
            notifications all update in real-time without writing a single line of JavaScript</p>
    </section>
    <section id="why-use-datastar">
        <h2>
            Why use Datastar?
        </h2>
        <ul>
            <li>Minimal JavaScript • Just include a single 13.3 KiB file - smaller than Alpine.js and HTMX combined</li>
            <li>HATEOAS Compliant • The only JavaScript you need is the library itself - no additional client-side code
                required
            </li>
            <li>Server Technology Agnostic • Write your backend in any language</li>
            <li>Real-time Updates • Utilizes server-sent events for fast, responsive experiences</li>
        </ul>
    </section>
    <section id="examples">
        <h2>Datastar Examples</h2>
        <p>PORTED HTMX EXAMPLES</p>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            ACTIVE SEARCH
        </h3>
        <p>This example actively searches a notes database as the user enters text</p>
        <a asp-controller="Home" asp-action="ActiveSearch" asp-fragment="active-search-demo">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            ANIMATIONS
        </h3>
        <p>Use CSS transitions to add smooth animations and transitions to your web page</p>
        <a asp-controller="Home" asp-action="Animations">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            BULK UPDATE
        </h3>
        <p>This example shows how to implement a common pattern where rows are selected and then bulk updated.</p>
        <a asp-controller="Home" asp-action="BulkUpdate">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            CLICK TO EDIT
        </h3>
        <p>The click to edit pattern provides a way to offer inline editing of all or part of a record without a page
            refresh</p>
        <a asp-controller="Home" asp-action="ClickToEdit">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            CLICK TO LOAD
        </h3>
        <p>This example shows how to implement click-to-load the next page in a table of data</p>
        <a asp-controller="Home" asp-action="ClickToLoad">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            DELETE ROW
        </h3>
        <p>This example shows how to implement a delete button that removes a table row upon completion</p>
        <a asp-controller="Home" asp-action="DeleteRow">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            DIALOGS BROWSER
        </h3>
        <p>Dialogs can be triggered with the standard browser prompt and confirm within an expression</p>
        <a asp-controller="Home" asp-action="DialogsBrowser">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            EDIT ROW
        </h3>
        <p>This example shows how to implement editable rows</p>
        <a asp-controller="Home" asp-action="EditRow">→ View Example</a>&nbsp;<a
            href="https://data-star.dev/examples/edit_row" target="_blank">→ View Datastar Example</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            FILE UPLOAD
        </h3>
        <p>In this example we show how to create a file upload form that will be submitted via fetch</p>
        <a asp-controller="Home" asp-action="FileUpload">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            INDICATOR
        </h3>
        <p>Show a loading indicator</p>
        <a asp-controller="Home" asp-action="Indicator" asp-fragment="indicator-demo">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            INFINITE SCROLL
        </h3>
        <p>The infinite scroll pattern provides a way to load content dynamically on user scrolling action</p>
        <a asp-controller="Home" asp-action="InfiniteScroll">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            INLINE VALIDATION
        </h3>
        <p>This example shows how to do inline field validation</p>
        <a asp-controller="Home" asp-action="InlineValidation">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            LAZY LOAD
        </h3>
        <p>This example shows how to lazily load an element on a page. We start with an initial state showing a spinner
            and the loading text</p>
        <a asp-controller="Home" asp-action="LazyLoad">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            LAZY TABS
        </h3>
        <p>Shows how easy it is to implement tabs using Datastar</p>
        <a asp-controller="Home" asp-action="LazyTabs">View Example →</a>

        <h3>
            <span class="status-icon complete" title="Complete">✓</span>
            PROGRESS BAR
        </h3>
        <p>This example shows how to implement an updating progress graphic</p>
        <a asp-controller="Home" asp-action="ProgressBar">View Example →</a>

        <h3>
            <span class="status-icon todo" title="Not Started">✗</span>
            SORTABLE
        </h3>
        <p>In the original example you had to hook into HTMX's events. With Datastar, you can easily listen for custom
            events using data-on-*, and update signals to effect change</p>
        <a asp-controller="Home" asp-action="Sortable">View Example →</a>

        <h3>
            <span class="status-icon pending" title="In Progress">✗</span>
            VALUE SELECT
        </h3>
        <p>In this example we show how to make the values in one select depend on the value selected in another select.
        </p>
        <a asp-controller="Home" asp-action="ValueSelect">View Example →</a>
    </section>
</main>
<!-- ./ Main -->